Configurer Git
Si vous débutez avec Git et GitHub, vous devez d’abord exécuter quelques commandes pour associer votre identité à Git et vous authentifier auprès de GitHub.

Démarrez Visual Studio Code.

Sélectionnez Terminal, puis Nouveau terminal.

# Dans la liste déroulante, sélectionnez Git bash. Si vous préférez utiliser un autre interpréteur de commandes Unix, tel que Zsh, n'hésitez pas à le sélectionner. Git pour Windows fournit Git Bash, qui facilite l’exécution des commandes Git.
git clone https://github.com/mtaileb/mslearn-tailspin-spacegame-web-deploy.git
cd mslearn-tailspin-spacegame-web-deploy
# Listons les dépôts distants:
git remote -v
# Vous voyez que vous avez à la fois un accès en récupération (téléchargement) et en poussée (chargement) à votre dépôt.
# Origin spécifie votre dépôt sur GitHub. Quand vous dupliquez du code d’un autre dépôt, le dépôt distant d’origine (celui à partir duquel vous avez effectué la duplication) est généralement nommé upstream (amont).
# Exécutez la commande suivante pour créer un dépôt distant nommé upstream qui pointe vers mon dépôt :
git remote add upstream https://github.com/<votre-repo-GitHub>/mslearn-tailspin-spacegame-web-deploy.git
# Vérifions que c'est pris en compte!
git remote -v
# Vous voyez que vous avez toujours à la fois un accès en récupération (téléchargement) et en poussée (chargement) à votre dépôt. Maintenant, vous avez aussi un accès en récupération à partir de mon dépôt.
# Exécutez la commande suivante à partir du répertoire racine de votre projet.
code .

# Nota: Si la commande code échoue, vous devez ajouter Visual Studio Code à la variable PATH de votre système. Pour ce faire :
#    Dans Visual Studio Code, sélectionnez F1, ou sélectionnez Affichage>Palette de commandes pour accéder à la palette de commandes.
#    Tapez commande interpréteur de commandes pour trouver la commande Commande d’interpréteur de commandes : Installer la commande 'code' dans PATH.
#    Redémarrez le terminal pour que le nouveau PATH soit pris en compte.
# Vous êtes maintenant prêt à utiliser le code source de Space Game et la configuration Azure Pipelines à partir de votre environnement de développement local.

# Récupérer (fetch) la branche à partir du GitHub upstream (celui de Microsoft)
#    Dans Visual Studio Code, ouvrez le terminal intégré.
#    Exécutez les commandes suivantes pour récupérer (fetch) la branche release-pipeline à partir du dépôt MicrosoftDocs et basculer vers une nouvelle branche upstream/release-pipeline.
git fetch upstream release-pipeline
# Switchons maintenons à la branche release-pipeline:
git checkout -B release-pipeline upstream/release-pipeline

# Ouvrons le fichier azure-pipelines.yml pour le commenter:
code azure-pipelines.yml

# Faire le push vers Azure Repos (après avoir supprimé l'ancien repo 'origin' pour le remplacer):
git remote remove origin
git remote add origin https://mehditaileb@dev.azure.com/mehditaileb/SpaceGames/_git/Space%20Game%20-%20web%20-%20Release
(alternative: git remote set-url origin https://mehditaileb@dev.azure.com/mehditaileb/SpaceGames/_git/Space%20Game%20-%20web%20-%20Release)
git push -u origin --all

Exécuter le pipeline
À ce stade, vous disposez des éléments suivants :
    Une duplication (fork) du référentiel mslearn-tailspin-spacegame-web-deploy sur votre compte GitHub
    Le référentiel mslearn-tailspin-spacegame-web-deploy cloné localement
    Une branche nommée release-pipeline qui contient le code source du site web et une configuration initiale d’Azure Pipelines.
Vous allez ensuite déclencher manuellement l'exécution du pipeline. Cette étape est l’assurance que votre projet est configuré de façon à être généré à partir de votre dépôt GitHub. La configuration initiale du pipeline génère l'application et produit un artefact de build.
    Accédez à votre projet dans Azure Devops, puis sélectionnez Pipelines.
    Sélectionnez le pipeline mslearn-tailspin-spacegame-web-deploy. Si vous y êtes invité, veillez à sélectionner Autoriser les ressources pour autoriser la connexion de service.
    Sélectionnez Exécuter le pipeline, puis sélectionnez la branche release-pipeline dans le menu déroulant Branche/étiquette. Sélectionnez Exécuter.
    Dans la page Résumé, sélectionnez votre travail de pipeline pour afficher les journaux.
    Une fois l’exécution terminée, sélectionnez le bouton Précédent pour revenir à la page Résumé.
    Sélectionnez votre artefact publié (Tailspin.Space.Game.Web.zip est votre artefact de build. Ce fichier contient votre application générée et ses dépendances).
Vous disposez maintenant d’un pipeline de build pour le projet web Space Game. Ensuite, vous allez ajouter une phase de déploiement pour déployer votre artefact de build sur Azure App Service.

Créer l’instance App Service:
    Connectez-vous au portail Azure.
    Sélectionnez App Services dans le volet gauche.
    Sélectionnez Créer>Application web pour créer une application web.
    Sous l’onglet Général, entrez les valeurs indiquées ci-dessous (voir aussi le support de formation circa p. 258):

Paramètre 	Valeur
Détails du projet 	
Abonnement 	votre abonnement
Groupe de ressources 	Sélectionnez Créer nouveau, puis entrez tailspin-space-game-rg et sélectionnez OK.
Détails de l’instance 	
Nom 	Indiquez un nom unique, comme tailspin-space-game-1234. Ce nom doit être unique au sein d’Azure. Il devient partie intégrante du nom de domaine. Dans la pratique, choisissez un nom qui décrit votre service. Notez le nom. Il sera utile plus tard.
Publier 	Code
Pile d’exécution 	.NET 6 (LTS)
Système d'exploitation 	Linux
Région 	Sélectionnez une région, de préférence proche de vous.
Plans tarifaires 	
Plan Linux 	Acceptez la valeur par défaut.
Plan tarifaire 	Sélectionnez le niveau tarifaire B1 de base dans le menu déroulant.

    Sélectionnez Vérifier + créer, passez en revue le formulaire, puis sélectionnez Créer. Le déploiement prend quelques         instants.
    Une fois le déploiement effectué, sélectionnez Accéder à la ressource. App Service Essentials affiche les détails            relatifs à votre déploiement.
    Sélectionnez l’URL pour vérifier l’état de votre App Service.

Créer une connexion de service:


    Dans Azure DevOps, accédez à votre projet Space Game - web - Release.

    Dans le coin inférieur gauche de la page, sélectionnez Paramètres du projet.

    Sous Pipelines, sélectionnez Connexions de service.

    Sélectionnez Nouvelle connexion de service, Azure Resource Manager, puis Suivant.

    Sélectionnez Principal du service (automatique), puis Suivant.

    Renseignez les champs obligatoires comme suit. Si vous y êtes invité, connectez-vous à votre compte Microsoft.
    Champ 	Valeur
    Niveau de portée 	Abonnement
    Abonnement 	Votre abonnement Azure
    Groupe de ressources 	tailspin-space-game-rg
    Nom de la connexion de service 	Resource Manager - Tailspin - Space Game

    Vérifiez que l’option Accorder une autorisation d’accès à tous les pipelines est sélectionnée.

    Cliquez sur Enregistrer.

Ajouter la phase de génération à votre pipeline

Un pipeline multiphase vous permet de définir des phases distinctes par lesquelles passe votre modification dès qu’elle est promue via le pipeline. Chaque phase définit l'agent, les variables et les étapes nécessaires à l'exécution de cette phase du pipeline. Dans cette section, vous définissez une phase pour effectuer la génération. Vous définirez une deuxième phase pour déployer l’application web dans App Service.

Pour convertir votre configuration de build existante en pipeline multiphase, vous devez ajouter une section stages à votre configuration, puis ajouter une ou plusieurs sections stage pour chaque phase de votre pipeline. Les phases se décomposent en travaux, qui sont une série d’étapes qui s’exécutent de manière séquentielle en tant qu’unité.
    À partir de votre projet dans Visual Studio Code, ouvrez azure-pipelines.yml, puis remplacez son contenu par le code du ficher (version_generation)_azure_pipelines.yml dans le présent dossier Github.
    À partir du terminal intégré, exécutez les commandes suivantes pour indexer, valider, puis pousser (push) vos modifications vers votre branche distante.
    Dans Azure Pipelines, accédez à votre pipeline pour afficher les journaux.
    Une fois la génération terminée, sélectionnez le bouton Précédent pour revenir à la page récapitulative, et vérifiez l’état de votre pipeline et de l’artefact publié.

Créer l'environnement de développement
Un environnement est une représentation abstraite de votre environnement de déploiement. Les environnements peuvent être utilisés pour définir des critères spécifiques pour votre mise en production, tels que le pipeline dont le déploiement est autorisé dans l’environnement. Les environnements peuvent également être utilisés pour configurer des approbations manuelles, dans le but d’approuver un utilisateur/groupe spécifique avant la reprise du déploiement.
    Dans Azure Pipelines, sélectionnez Environnements.
    Sélectionnez Créer un environnement.
    Sous Nom, entrez dev.
    Laissez les valeurs par défaut dans les champs restants.
    Sélectionnez Créer.

Stocker le nom de votre application web dans une variable de pipeline

La phase Déployer que nous allons créer utilisera le nom pour identifier l’instance App Service sur laquelle effectuer le déploiement, par exemple : tailspin-space-game-web-1234.

Vous pourriez coder ce nom en dur dans la configuration du pipeline, mais en le définissant sous forme de variable, votre configuration est plus facile à réutiliser.

    Dans Azure DevOps, sélectionnez Pipelines puis Bibliothèque.
    Sélectionnez + Groupe de variables pour créer un groupe de variables.

    Entrez Release comme nom du groupe de variables.

    Sélectionnez Ajouter sous Variables pour ajouter une nouvelle variable.

    Entrez WebAppName comme nom de la variable et le nom de votre instance App Service comme valeur : par exemple tailspin-space-game-web-1234.

    Cliquez sur Enregistrer.

Ajouter la phase de déploiement à votre pipeline

Nous allons étendre notre pipeline en ajoutant une phase de déploiement pour déployer Space Game sur App Service, en utilisant des tâches download et AzureWebApp@1 pour télécharger l’artefact de build puis le déployer.

    À partir de Visual Studio Code, remplacez le contenu de azure-pipelines.yml par le code yaml du fichier (version_generation)_azure_pipelines.yml dans le présent répertoire.

Notez la section mise en évidence et la façon dont nous utilisons les tâches download et AzureWebApp@1. Le pipeline extrait le $(WebAppName) à partir du groupe de variables que nous avons créé.

Notez également comment nous utilisons environment pour déployer dans l’environnement de développement.

À partir du terminal intégré, ajoutez azure-pipelines.yml à l’index. Commitez ensuite la modification et poussez-la vers GitHub.

Dans Azure Pipelines, accédez à votre pipeline pour afficher les journaux.

Une fois la génération terminée, sélectionnez le bouton Précédent pour revenir à la page récapitulative et vérifiez l’état de vos phases. Les deux phases se sont terminées avec succès dans notre cas.

Voir le site web déployé sur App Service

    Si l’onglet App Service est toujours ouvert, il vous suffit d’actualiser la page. Sinon, accédez à votre instance Azure App Service dans le Portail Azure et sélectionnez l’URL de l’instance, par exemple https://tailspin-space-game-web-1234.azurewebsites.net
